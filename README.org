#+TITLE:My Scripts

* Table of Contents :toc:
- [[#config][Config]]
- [[#web][Web]]
  - [[#brave-url][brave-url]]
  - [[#download][download]]
  - [[#frequent-sites][frequent-sites]]
  - [[#google][google]]
  - [[#site-search][site-search]]
- [[#lf][LF]]
- [[#man][Man]]
- [[#pen-init-needs-refactoring][Pen-init (Needs Refactoring)]]
- [[#picom-toggle][Picom-toggle]]
- [[#prompt][Prompt]]
- [[#wallpaper][Wallpaper]]

* Config
#+begin_src sh #+header-args: :tangle dmenu/Configs/configs.sh :shebang #!/bin/env bash
dir="$HOME/.scripts/dmenu/Configs/links/"
args=$(cd ${dir} && ls | sort)
prompt=$(echo -e "${args[@]}" | dmenu -i -p 'Config:')

if [ "$prompt" == $prompt ]; then
	exec emacsclient -c ${dir}${prompt}
fi
#+end_src
* Web
** brave-url
#+begin_src sh #+header-args: :tangle web/brave-url.sh :shebang #!/bin/env bash
url=$(dmenu -p "url: " <&-)
if [ "$url" == $url ]; then
brave $url
fi
#+end_src
** download
#+begin_src sh #+header-args: :tangle web/download.sh :shebang #!/bin/env bash
options="video\nNo Playlist Video\nmusic"
args=$(echo -e ${options} | sort)
prompt=$(echo -e "${args[@]}" | dmenu -i -p 'File:')
case "$prompt" in
    video)
        cd $HOME/Videos/
	    url=$(xclip -o)
	    youtube-dl $url
;;
    'No Playlist Video')
        cd $HOME/Videos/
        url=$(xclip -o)
        youtube-dl --no-playlist $url
        music)
     cd $HOME/Music/
	 url=$(xclip -o)
	 youtube-dl -x $url
;;
esac

#+end_src
** frequent-sites
#+begin_src sh #+header-args: :tangle web/frequent-sites.sh :shebang #!/bin/env bash
args="Youtube
Just Cause 3
ArchWiki
Youtube Music"
prompt=$(echo -e "${args[@]}" | dmenu -i -p 'Site: ')

case $prompt in
    Youtube)
        url=youtube.com
        ;;
    'Just Cause 3')
        url=https://www.youtube.com/playlist?list=PL4Sz7_l-PtwBmvH_QivBJs3eD21Zqj6Lv
        ;;
    ArchWiki)
        url=wiki.archlinux.org
        ;;
    'Youtube Music')
        url=music.youtube.com
        ;;
esac
if [ "$url" == $url ]; then
    brave "$url"
fi
#+end_src

#+RESULTS:

** google
#+begin_src sh #+header-args: :tangle web/google.sh :shebang #!/bin/env bash
query=$(dmenu -p "Google Search: " <&-)
query=${query// /%20}
if [ "$query" == $query ]; then
brave "http://www.google.com/search?q=${query}"
fi
#+end_src
** site-search
#+begin_src sh #+header-args: :tangle web/site-search.sh :shebang #!/bin/env bash
args="Youtube\nArchWiki\nProton DB"
argsNum=$(echo -e "${args[@]}" | wc -l)
prompt=$(echo -e "${args[@]}" | dmenu -l "$argsNum" -i -p 'Site to search: ')
case "$prompt" in
   Youtube)
    query=$(dmenu -p "Youtube Search: " <&-)
    query=${query// /%20}
    if [ "$query" == $query ]; then
    brave "youtube.com/results?search_query=${query}"
    fi
;;

   ArchWiki)
    query=$(dmenu -p "ArchWiki: " <&-)
    query=${query// /_}
    if [ "$query" == $query ]; then
    brave "https://wiki.archlinux.org/index.php/Special:Search/${query}"
    fi
;;

    'Proton DB')
  query=$(dmenu -p "Proton DB: " <&-)
  query=${query// /%20}
  if [ "$query" == $query ]; then
  brave "https://www.protondb.com/search?q=${query}"
  fi
;;
esac
#+end_src
* LF
#+begin_src sh #+header-args: :tangle frequent-folders.sh :shebang #!/bin/env bash
args="Groff Folder\nWritting Folder"
argsNum=$(echo -e "${args[@]}" | wc -l)
prompt=$(echo -e "${args[@]}" | dmenu -l "$argsNum" -i -p 'Where to?')
case $prompt in
    "Groff Folder") alacritty -e lf $HOME/Documents/groff ;;
    "Writting Folder") alacritty -e lf $HOME/Documents/Writing ;;
esac
#+end_src
* Man
#+begin_src sh #+header-args: :tangle man.sh :shebang #!/bin/env bash
man -k . | dmenu -l 30 | awk '{print $1}' | xargs -r man -Tpdf | zathura -
#+end_src
* Pen-init (Needs Refactoring)
#+begin_src sh #+header-args: :tangle pen-init.sh :shebang #!/bin/env bash
displayOne=$(xrandr | grep " connected" | cut -d" " -f1 | sed -n '1p')
pen=$(xsetwacom --list | grep stylus | cut --output-delimiter="id: " -f2 | cut -d" " -f2)
if [ $1 == right ]; then
xsetwacom set "${pen}" MapToOutput ${displayOne}
fi

if [ $1 == next ]; then
 xsetwacom set "${pen}" MapToOutput next
fi

if [ $1 == both ]; then
 xsetwacom set "${pen}" MapToOutput desktop
fi
#+end_src
* Picom-toggle
#+begin_src sh #+header-args: :tangle picom-toggle.sh :shebang #!/bin/env bash
if pgrep -x "picom" > /dev/null
then
	killall picom
else
	picom -b --config ~/.config/herbstluftwm/picom.conf
fi
#+end_src
* Prompt
#+begin_src sh #+header-args: :tangle prompt.sh :shebang #!/bin/env bash
# ./prompt "Do you want to shutdown?" "shutdown -h now"
[ $(echo -e "No\nYes" | dmenu -i -p "$1") \
    == "Yes" ] && $2
#+end_src
* Wallpaper
#+begin_src sh #+header-args: :tangle wallpaper.sh :shebang #!/bin/env bash
if [[ $1 == "draw" ]]; then
cd /home/jake/Pictures/Wallpapers
leftDisplay=$(xrandr | grep " connected" | cut -d" " -f1 | sed -n '1p')
rightDisplay=$(xrandr | grep " connected" | cut -d" " -f1 | sed -n '2p')
leftImage=$(cat .background | sed -n '1p')
rightImage=$(cat .background | sed -n '2p')
xwallpaper --output ${leftDisplay} --stretch ${leftImage} --output ${rightDisplay} --stretch ${rightImage}
fi

if [[ $1 == "set" ]]; then
cd $HOME/Pictures/Wallpapers
sxiv -rqot * > TEMP
   if [ "$(wc -l < TEMP)" == 0 ]; then
   rm $HOME/Pictures/Wallpapers/TEMP
   fi
   if [ "$(wc -l < TEMP)" == 1 ]; then
    sxiv -rqot * >> TEMP
    mv TEMP .background
    $HOME/.scripts/wallpaper.sh draw
   fi
   if [ "$(wc -l < TEMP)" == 2 ]; then
      mv TEMP .background
      $HOME/.scripts/wallpaper.sh draw
   fi

fi
#+end_src
